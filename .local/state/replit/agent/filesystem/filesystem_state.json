{"file_contents":{"public/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5132},"public/src/pages/Shop.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ProductCard } from \"../components/ProductCard\";\nimport { Button } from \"../components/ui/button\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"../components/ui/radio-group\";\nimport { Search, SlidersHorizontal } from \"lucide-react\";\nimport type { Product } from \"../../../shared/schema\";\n\nexport default function Shop({\n  onAddToCart,\n}: {\n  onAddToCart: (product: Product) => void;\n}) {\n  const [location] = useLocation();\n  const urlParams = new URLSearchParams(location.split(\"?\")[1] || \"\");\n  const initialCategory = urlParams.get(\"category\") || \"all\";\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(initialCategory);\n  const [stockFilter, setStockFilter] = useState(\"all\");\n  const [showFilters, setShowFilters] = useState(false);\n\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const categories = [\n    { value: \"all\", label: \"Wszystkie\" },\n    { value: \"odziez-robocza\", label: \"Odzież robocza\" },\n    { value: \"obuwie\", label: \"Obuwie BHP\" },\n    { value: \"rekawice\", label: \"Rękawice\" },\n    { value: \"ochrona-glowy\", label: \"Ochrona głowy\" },\n    { value: \"ochrona-sluchu\", label: \"Ochrona słuchu\" },\n  ];\n\n  const filteredProducts = products?.filter((product) => {\n    const matchesSearch =\n      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory =\n      selectedCategory === \"all\" || product.category === selectedCategory;\n    const matchesStock =\n      stockFilter === \"all\" ||\n      (stockFilter === \"in-stock\" && parseInt(product.stock.toString()) > 0) ||\n      (stockFilter === \"out-of-stock\" && parseInt(product.stock.toString()) === 0);\n\n    return matchesSearch && matchesCategory && matchesStock;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Filters Sidebar */}\n          <aside className=\"lg:w-64 flex-shrink-0\">\n            <div className=\"bg-white rounded-lg shadow-md p-6 sticky top-20\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold\">Filtry</h2>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"lg:hidden\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  data-testid=\"button-toggle-filters\"\n                >\n                  <SlidersHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <div className={`space-y-6 ${showFilters ? \"block\" : \"hidden lg:block\"}`}>\n                {/* Search */}\n                <div>\n                  <Label htmlFor=\"search\" className=\"text-sm font-medium mb-2 block\">\n                    Szukaj produktu\n                  </Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"search\"\n                      type=\"search\"\n                      placeholder=\"Wpisz nazwę...\"\n                      className=\"pl-10\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      data-testid=\"input-search\"\n                    />\n                  </div>\n                </div>\n\n                {/* Category Filter */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Kategoria</Label>\n                  <RadioGroup\n                    value={selectedCategory}\n                    onValueChange={setSelectedCategory}\n                  >\n                    {categories.map((category) => (\n                      <div key={category.value} className=\"flex items-center space-x-2 mb-2\">\n                        <RadioGroupItem\n                          value={category.value}\n                          id={category.value}\n                          data-testid={`radio-category-${category.value}`}\n                        />\n                        <Label\n                          htmlFor={category.value}\n                          className=\"text-sm cursor-pointer flex-1\"\n                        >\n                          {category.label}\n                        </Label>\n                      </div>\n                    ))}\n                  </RadioGroup>\n                </div>\n\n                {/* Stock Filter */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Dostępność</Label>\n                  <RadioGroup value={stockFilter} onValueChange={setStockFilter}>\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <RadioGroupItem\n                        value=\"all\"\n                        id=\"stock-all\"\n                        data-testid=\"radio-stock-all\"\n                      />\n                      <Label htmlFor=\"stock-all\" className=\"text-sm cursor-pointer\">\n                        Wszystkie\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <RadioGroupItem\n                        value=\"in-stock\"\n                        id=\"stock-in\"\n                        data-testid=\"radio-stock-in\"\n                      />\n                      <Label htmlFor=\"stock-in\" className=\"text-sm cursor-pointer\">\n                        W magazynie\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem\n                        value=\"out-of-stock\"\n                        id=\"stock-out\"\n                        data-testid=\"radio-stock-out\"\n                      />\n                      <Label htmlFor=\"stock-out\" className=\"text-sm cursor-pointer\">\n                        Brak w magazynie\n                      </Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                {/* Reset Filters */}\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setSelectedCategory(\"all\");\n                    setStockFilter(\"all\");\n                  }}\n                  data-testid=\"button-reset-filters\"\n                >\n                  Wyczyść filtry\n                </Button>\n              </div>\n            </div>\n          </aside>\n\n          {/* Products Grid */}\n          <main className=\"flex-1\">\n            <div className=\"mb-6\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-product-count\">\n                Znaleziono {filteredProducts?.length || 0} produktów\n              </p>\n            </div>\n\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <div\n                    key={i}\n                    className=\"bg-gray-200 animate-pulse rounded-lg h-96\"\n                  />\n                ))}\n              </div>\n            ) : filteredProducts && filteredProducts.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredProducts.map((product) => (\n                  <ProductCard\n                    key={product.id}\n                    product={product}\n                    onAddToCart={onAddToCart}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\" data-testid=\"empty-products\">\n                <p className=\"text-xl text-muted-foreground mb-4\">\n                  Nie znaleziono produktów spełniających kryteria\n                </p>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setSelectedCategory(\"all\");\n                    setStockFilter(\"all\");\n                  }}\n                  data-testid=\"button-clear-search\"\n                >\n                  Wyczyść filtry\n                </Button>\n              </div>\n            )}\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8772},"public/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2363},"public/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8609},"public/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Button } from \"./button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6200},"public/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":760},"replit.md":{"content":"# Sklep BHP - E-Commerce Platform\n\n## Overview\n\nSklep BHP is a B2B/B2C e-commerce platform specializing in occupational health and safety equipment. The application provides a full-featured online store for industrial safety gear, work clothing, protective footwear, and personal protective equipment. Built with a modern TypeScript stack, it features a React-based frontend with a utility-focused design system and an Express backend with PostgreSQL database storage.\n\nThe platform supports product browsing, shopping cart functionality, order management, and user authentication with admin capabilities. The design emphasizes clarity, trust, and efficiency while maintaining industrial aesthetics through a black, yellow, and white color scheme.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and API interactions\n- Tailwind CSS for utility-first styling\n\n**UI Component System:**\n- Shadcn/ui components (Radix UI primitives) configured in \"new-york\" style\n- Custom design tokens defined in CSS variables for theming\n- Component aliases configured for clean imports (@/components, @/lib, etc.)\n\n**State Management Strategy:**\n- Local cart state managed in App.tsx with localStorage persistence\n- Server state cached and synchronized via React Query\n- Form state handled by React Hook Form with Zod validation\n\n**Key Design Decisions:**\n- Single-page application with client-side routing for smooth navigation\n- Component composition pattern using Radix UI primitives for accessibility\n- Utility-first CSS approach with custom design system extending Tailwind\n- Mobile-responsive design with breakpoint-aware components\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js with TypeScript for type-safe API development\n- ESM modules throughout the codebase\n- Custom middleware for request logging and error handling\n\n**Data Layer:**\n- Drizzle ORM for type-safe database operations\n- PostgreSQL as the primary database (configured for Neon serverless)\n- Schema-first approach with Zod validation integration\n- In-memory storage fallback (MemStorage) for development/testing\n\n**API Design:**\n- RESTful endpoints organized by resource (/api/products, /api/orders, /api/auth)\n- Request validation using Zod schemas derived from Drizzle tables\n- JWT-based authentication for secure user sessions\n- Bcrypt for password hashing\n\n**Key Architectural Patterns:**\n- Repository pattern abstracted through IStorage interface\n- Dependency injection ready (storage can be swapped between memory/database)\n- Middleware pipeline for cross-cutting concerns (logging, error handling)\n- Environment-based configuration for development vs. production\n\n### Authentication & Authorization\n\n**Implementation:**\n- JWT tokens for stateless authentication\n- Bcrypt password hashing (bcryptjs) with salt rounds\n- User roles (isAdmin flag) for admin functionality\n- Token-based session management stored in localStorage on client\n- Protected routes and API endpoints based on authentication status\n\n### Build & Deployment Strategy\n\n**Development:**\n- Vite HMR for fast frontend iteration\n- tsx for running TypeScript server code directly\n- Concurrent development server setup with Vite middleware\n\n**Production:**\n- Frontend: Vite build outputs to dist/public\n- Backend: esbuild bundles server code to dist/index.js\n- Single Node.js process serves both static files and API\n- Environment variable configuration for database URLs and secrets\n\n## External Dependencies\n\n### Database & ORM\n- **PostgreSQL**: Primary database (configured for @neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database toolkit with schema definitions in shared/schema.ts\n- **drizzle-kit**: CLI tool for database migrations and schema management\n\n### UI & Component Libraries\n- **Radix UI**: Headless component primitives (@radix-ui/* packages)\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **cmdk**: Command palette component\n\n### Authentication & Security\n- **jsonwebtoken**: JWT creation and verification\n- **bcryptjs**: Password hashing library\n\n### Form & Validation\n- **React Hook Form**: Form state management (@hookform/resolvers)\n- **Zod**: Schema validation and TypeScript inference\n- **drizzle-zod**: Integration between Drizzle schemas and Zod\n\n### Build Tools & Development\n- **Vite**: Frontend build tool and dev server\n- **esbuild**: Backend bundler for production\n- **tsx**: TypeScript execution for development\n- **TypeScript**: Type system throughout the stack\n\n### Routing & State\n- **wouter**: Lightweight routing library\n- **TanStack Query**: Server state management and caching\n\n### Development Enhancements (Replit-specific)\n- **@replit/vite-plugin-runtime-error-modal**: Runtime error overlay\n- **@replit/vite-plugin-cartographer**: Code navigation\n- **@replit/vite-plugin-dev-banner**: Development banner\n\n### Design System\n- **class-variance-authority (CVA)**: Type-safe variant API for components\n- **clsx & tailwind-merge**: Utility for conditional className composition\n- **Inter font**: Primary typeface from Google Fonts","size_bytes":5401},"public/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"../../hooks/use-mobile\"\nimport { cn } from \"../../lib/utils\"\nimport { Button } from \"./button\"\nimport { Input } from \"./input\"\nimport { Separator } from \"./separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"./sheet\"\nimport { Skeleton } from \"./skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"./tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21770},"public/src/components/ProductCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { ShoppingCart } from \"lucide-react\";\nimport type { Product } from \"../../../shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  onAddToCart?: (product: Product) => void;\n}\n\nexport function ProductCard({ product, onAddToCart }: ProductCardProps) {\n  const inStock = parseInt(product.stock.toString()) > 0;\n  const price = parseFloat(product.price.toString());\n\n  return (\n    <div\n      className=\"bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg group\"\n      data-testid={`card-product-${product.id}`}\n    >\n      <Link href={`/produkt/${product.id}`} className=\"block\">\n        <div className=\"relative bg-gray-100 aspect-square flex items-center justify-center border-b border-gray-200\">\n          <div className=\"text-gray-300 text-6xl\">📦</div>\n          <Badge\n            className=\"absolute top-2 right-2 bg-black/80 text-white text-xs\"\n            data-testid={`badge-category-${product.id}`}\n          >\n            {product.category}\n          </Badge>\n        </div>\n      </Link>\n\n      <div className=\"p-4\">\n        <Link href={`/produkt/${product.id}`}>\n          <h3\n            className=\"font-semibold text-lg mb-2 line-clamp-2 hover:text-primary transition-colors\"\n            data-testid={`text-product-name-${product.id}`}\n          >\n            {product.name}\n          </h3>\n        </Link>\n\n        <p className=\"text-sm text-muted-foreground line-clamp-2 mb-3\" data-testid={`text-product-description-${product.id}`}>\n          {product.description}\n        </p>\n\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center gap-2\">\n            <div\n              className={`h-2 w-2 rounded-full ${\n                inStock ? \"bg-green-600\" : \"bg-red-600\"\n              }`}\n            />\n            <span className=\"text-sm\" data-testid={`text-stock-${product.id}`}>\n              {inStock ? \"W magazynie\" : \"Brak\"}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between gap-2\">\n          <span className=\"text-2xl font-bold\" data-testid={`text-price-${product.id}`}>\n            {price.toFixed(2)} zł\n          </span>\n          <Button\n            variant=\"default\"\n            size=\"default\"\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            onClick={() => onAddToCart?.(product)}\n            disabled={!inStock}\n            data-testid={`button-add-to-cart-${product.id}`}\n          >\n            <ShoppingCart className=\"h-4 w-4 mr-2\" />\n            Dodaj\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2771},"public/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1596},"public/src/components/PromoBanner.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { Settings } from \"../../../shared/schema\";\n\nexport function PromoBanner() {\n  const [isDismissed, setIsDismissed] = useState(false);\n  \n  const { data: settings = [] } = useQuery<Settings[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const getSetting = (key: string) => {\n    return settings.find((s: Settings) => s.key === key)?.value || \"\";\n  };\n\n  const bannerShow = getSetting(\"bannerShow\") === \"true\";\n  const bannerText = getSetting(\"bannerText\");\n  const bannerLink = getSetting(\"bannerLink\");\n\n  if (!bannerShow || isDismissed || !bannerText) {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-primary text-primary-foreground py-3 px-4 flex items-center justify-between\" data-testid=\"banner-promo\">\n      <div className=\"flex-1 text-center\">\n        {bannerLink ? (\n          <Link href={bannerLink} className=\"hover:underline font-medium\" data-testid=\"link-banner\">\n            {bannerText}\n          </Link>\n        ) : (\n          <span className=\"font-medium\">{bannerText}</span>\n        )}\n      </div>\n      <button\n        onClick={() => setIsDismissed(true)}\n        className=\"hover-elevate p-1 rounded\"\n        aria-label=\"Zamknij banner\"\n        data-testid=\"button-dismiss-banner\"\n      >\n        <X className=\"h-4 w-4\" />\n      </button>\n    </div>\n  );\n}\n","size_bytes":1447},"public/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":848},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"public/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"public/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"../components/ui/button\";\nimport { Home } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center px-4\">\n      <div className=\"text-center\">\n        <h1 className=\"text-9xl font-bold text-primary mb-4\">404</h1>\n        <h2 className=\"text-4xl font-bold mb-4\">Strona nie znaleziona</h2>\n        <p className=\"text-xl text-muted-foreground mb-8\">\n          Przepraszamy, strona której szukasz nie istnieje.\n        </p>\n        <Link href=\"/\" data-testid=\"link-home\">\n          <Button size=\"lg\" className=\"bg-primary text-primary-foreground\">\n            <Home className=\"mr-2 h-5 w-5\" />\n            Wróć na stronę główną\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":851},"public/src/pages/Checkout.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"../components/ui/button\";\nimport { Card } from \"../components/ui/card\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { apiRequest } from \"../lib/queryClient\";\nimport { CheckCircle2 } from \"lucide-react\";\nimport type { CartItem } from \"../../../shared/schema\";\n\nexport default function Checkout({\n  cartItems,\n  onClearCart,\n}: {\n  cartItems: CartItem[];\n  onClearCart: () => void;\n}) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [orderPlaced, setOrderPlaced] = useState(false);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    city: \"\",\n    postalCode: \"\",\n  });\n\n  const subtotal = cartItems.reduce(\n    (sum, item) => sum + parseFloat(item.price) * item.quantity,\n    0\n  );\n  const shipping = subtotal > 300 ? 0 : 19.99;\n  const total = subtotal + shipping;\n\n  const createOrderMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/orders\", {\n        customerName: formData.name,\n        customerEmail: formData.email,\n        customerPhone: formData.phone,\n        customerAddress: `${formData.address}, ${formData.postalCode} ${formData.city}`,\n        items: JSON.stringify(cartItems),\n        total: total.toString(),\n      });\n    },\n    onSuccess: () => {\n      setOrderPlaced(true);\n      onClearCart();\n      toast({\n        title: \"Zamówienie złożone!\",\n        description: \"Dziękujemy za zakupy w Sklep BHP.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się złożyć zamówienia. Spróbuj ponownie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createOrderMutation.mutate();\n  };\n\n  if (cartItems.length === 0 && !orderPlaced) {\n    setLocation(\"/koszyk\");\n    return null;\n  }\n\n  if (orderPlaced) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center py-16\">\n        <CheckCircle2 className=\"h-24 w-24 text-green-600 mb-6\" />\n        <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-order-success\">\n          Zamówienie złożone!\n        </h1>\n        <p className=\"text-muted-foreground text-lg mb-8 text-center max-w-md\">\n          Dziękujemy za zakupy. Potwierdzenie zostało wysłane na adres {formData.email}\n        </p>\n        <Button\n          size=\"lg\"\n          className=\"bg-primary text-primary-foreground\"\n          onClick={() => setLocation(\"/\")}\n          data-testid=\"button-back-home\"\n        >\n          Wróć na stronę główną\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <h1 className=\"text-4xl md:text-5xl font-bold mb-2\">Finalizacja zamówienia</h1>\n        <div className=\"flex items-center gap-4 mb-8\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"bg-primary text-black rounded-full h-8 w-8 flex items-center justify-center font-bold\">\n              1\n            </div>\n            <span className=\"font-medium\">Koszyk</span>\n          </div>\n          <div className=\"h-0.5 w-12 bg-primary\" />\n          <div className=\"flex items-center gap-2\">\n            <div className=\"bg-primary text-black rounded-full h-8 w-8 flex items-center justify-center font-bold\">\n              2\n            </div>\n            <span className=\"font-medium\">Dostawa</span>\n          </div>\n          <div className=\"h-0.5 w-12 bg-gray-300\" />\n          <div className=\"flex items-center gap-2\">\n            <div className=\"bg-gray-300 text-gray-600 rounded-full h-8 w-8 flex items-center justify-center font-bold\">\n              3\n            </div>\n            <span className=\"text-muted-foreground\">Potwierdzenie</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-bold mb-6\">Dane do wysyłki</h2>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Imię i nazwisko *</Label>\n                  <Input\n                    id=\"name\"\n                    required\n                    value={formData.name}\n                    onChange={(e) =>\n                      setFormData({ ...formData, name: e.target.value })\n                    }\n                    placeholder=\"Jan Kowalski\"\n                    data-testid=\"input-name\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={(e) =>\n                        setFormData({ ...formData, email: e.target.value })\n                      }\n                      placeholder=\"jan@example.com\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Telefon *</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      required\n                      value={formData.phone}\n                      onChange={(e) =>\n                        setFormData({ ...formData, phone: e.target.value })\n                      }\n                      placeholder=\"+48 123 456 789\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\">Ulica i numer *</Label>\n                  <Input\n                    id=\"address\"\n                    required\n                    value={formData.address}\n                    onChange={(e) =>\n                      setFormData({ ...formData, address: e.target.value })\n                    }\n                    placeholder=\"ul. Przykładowa 123\"\n                    data-testid=\"input-address\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"postalCode\">Kod pocztowy *</Label>\n                    <Input\n                      id=\"postalCode\"\n                      required\n                      value={formData.postalCode}\n                      onChange={(e) =>\n                        setFormData({ ...formData, postalCode: e.target.value })\n                      }\n                      placeholder=\"00-000\"\n                      data-testid=\"input-postal-code\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"city\">Miasto *</Label>\n                    <Input\n                      id=\"city\"\n                      required\n                      value={formData.city}\n                      onChange={(e) =>\n                        setFormData({ ...formData, city: e.target.value })\n                      }\n                      placeholder=\"Warszawa\"\n                      data-testid=\"input-city\"\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  size=\"lg\"\n                  className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 font-semibold mt-6\"\n                  disabled={createOrderMutation.isPending}\n                  data-testid=\"button-place-order\"\n                >\n                  {createOrderMutation.isPending ? \"Przetwarzanie...\" : \"Złóż zamówienie\"}\n                </Button>\n              </form>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"p-6 sticky top-20\">\n              <h2 className=\"text-2xl font-bold mb-6\">Twoje zamówienie</h2>\n              \n              <div className=\"space-y-4 mb-6\">\n                {cartItems.map((item) => (\n                  <div key={item.productId} className=\"flex gap-3\">\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className=\"w-16 h-16 object-cover rounded-md bg-gray-100\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm line-clamp-1\">{item.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {item.quantity} × {parseFloat(item.price).toFixed(2)} zł\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"space-y-2 border-t pt-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Suma częściowa</span>\n                  <span className=\"font-semibold\">{subtotal.toFixed(2)} zł</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Dostawa</span>\n                  <span className=\"font-semibold\">\n                    {shipping === 0 ? \"Gratis\" : `${shipping.toFixed(2)} zł`}\n                  </span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between text-xl font-bold\">\n                    <span>Razem</span>\n                    <span data-testid=\"text-checkout-total\">{total.toFixed(2)} zł</span>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10255},"public/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":693},"public/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Mail, Phone, MapPin } from \"lucide-react\";\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-black text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 py-12 md:py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 md:gap-12\">\n          {/* Company Info */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-4\">\n              Sklep <span className=\"text-primary\">BHP</span>\n            </h3>\n            <p className=\"text-gray-400 text-sm mb-4\">\n              Profesjonalna odzież robocza i środki ochrony osobistej najwyższej jakości.\n            </p>\n            <div className=\"flex items-center gap-2 text-sm text-gray-400 mb-2\">\n              <MapPin className=\"h-4 w-4 text-primary\" />\n              <span>Bohaterów Modlina 17, 05-100 Nowy Dwór Mazowiecki</span>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Szybkie linki</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-footer-home\">\n                  Strona główna\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/sklep\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-footer-shop\">\n                  Sklep\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/o-nas\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-footer-about\">\n                  O nas\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/kontakt\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-footer-contact\">\n                  Kontakt\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Categories */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Kategorie</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/sklep?category=odziez-robocza\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-category-workwear\">\n                  Odzież robocza\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/sklep?category=obuwie\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-category-footwear\">\n                  Obuwie BHP\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/sklep?category=rekawice\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-category-gloves\">\n                  Rękawice ochronne\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/sklep?category=ochrona-glowy\" className=\"text-gray-400 hover:text-primary transition-colors text-sm\" data-testid=\"link-category-safety\">\n                  Ochrona głowy\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Contact */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">Kontakt</h4>\n            <ul className=\"space-y-2\">\n              <li className=\"flex items-center gap-2 text-sm text-gray-400\">\n                <Phone className=\"h-4 w-4 text-primary\" />\n                <span>+48 123 456 789</span>\n              </li>\n              <li className=\"flex items-center gap-2 text-sm text-gray-400\">\n                <Mail className=\"h-4 w-4 text-primary\" />\n                <span>kontakt@sklepbhp.pl</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-white/10 mt-12 pt-8 text-center space-y-2\">\n          <p className=\"text-gray-400 text-sm\">\n            &copy; {currentYear} Sklep BHP Perfekt. Wszelkie prawa zastrzeżone.\n          </p>\n          <p className=\"text-gray-500 text-xs\" data-testid=\"text-credits\">\n            Created by: <span className=\"text-primary\">Maksym Martynovych</span> — Owner: <span className=\"text-primary\">Tomek Tomasz Burzykowski</span>\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4438},"public/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1143},"public/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4285},"public/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport { TooltipProvider } from \"./components/ui/tooltip\";\nimport { Header } from \"./components/Header\";\nimport { Footer } from \"./components/Footer\";\nimport { PromoBanner } from \"./components/PromoBanner\";\nimport { useToast } from \"./hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport type { Product, CartItem } from \"../../shared/schema\";\n\n// Pages\nimport Home from \"./pages/Home\";\nimport Shop from \"./pages/Shop\";\nimport ProductDetail from \"./pages/ProductDetail\";\nimport Cart from \"./pages/Cart\";\nimport Checkout from \"./pages/Checkout\";\nimport AdminLogin from \"./pages/AdminLogin\";\nimport AdminPanel from \"./pages/AdminPanel\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport Gallery from \"./pages/Gallery\";\nimport NotFound from \"./pages/not-found\";\n\nfunction Router() {\n  const { toast } = useToast();\n  const [cartItems, setCartItems] = useState<CartItem[]>(() => {\n    const saved = localStorage.getItem(\"cart\");\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  const handleAddToCart = (product: Product, quantity: number = 1) => {\n    setCartItems((prev) => {\n      const existingItem = prev.find((item) => item.productId === product.id);\n      if (existingItem) {\n        return prev.map((item) =>\n          item.productId === product.id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        );\n      }\n      return [\n        ...prev,\n        {\n          productId: product.id,\n          quantity,\n          name: product.name,\n          price: product.price.toString(),\n          image: product.image,\n        },\n      ];\n    });\n    toast({\n      title: \"Dodano do koszyka\",\n      description: `${product.name} został dodany do koszyka.`,\n    });\n  };\n\n  const handleUpdateQuantity = (productId: string, quantity: number) => {\n    if (quantity < 1) return;\n    setCartItems((prev) =>\n      prev.map((item) =>\n        item.productId === productId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const handleRemoveItem = (productId: string) => {\n    setCartItems((prev) => prev.filter((item) => item.productId !== productId));\n    toast({\n      title: \"Usunięto z koszyka\",\n      description: \"Produkt został usunięty z koszyka.\",\n    });\n  };\n\n  const handleClearCart = () => {\n    setCartItems([]);\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <PromoBanner />\n      <Header cartItemCount={cartItems.reduce((sum, item) => sum + item.quantity, 0)} />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={() => <Home onAddToCart={handleAddToCart} />} />\n          <Route path=\"/sklep\" component={() => <Shop onAddToCart={handleAddToCart} />} />\n          <Route\n            path=\"/produkt/:id\"\n            component={() => <ProductDetail onAddToCart={handleAddToCart} />}\n          />\n          <Route\n            path=\"/koszyk\"\n            component={() => (\n              <Cart\n                cartItems={cartItems}\n                onUpdateQuantity={handleUpdateQuantity}\n                onRemoveItem={handleRemoveItem}\n              />\n            )}\n          />\n          <Route\n            path=\"/zamowienie\"\n            component={() => (\n              <Checkout cartItems={cartItems} onClearCart={handleClearCart} />\n            )}\n          />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/admin\" component={AdminPanel} />\n          <Route path=\"/o-nas\" component={About} />\n          <Route path=\"/kontakt\" component={Contact} />\n          <Route path=\"/galeria\" component={Gallery} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":4228},"public/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":714},"public/src/hooks/use-toast.ts":{"content":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"../components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\n// actionTypes constant removed — string literal action types used directly\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype Action =\n  | {\n      type: \"ADD_TOAST\";\n      toast: ToasterToast;\n    }\n  | {\n      type: \"UPDATE_TOAST\";\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: \"DISMISS_TOAST\";\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: \"REMOVE_TOAST\";\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","size_bytes":3784},"public/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { ButtonProps, buttonVariants } from \"./button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2741},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, numeric, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(),\n  image: text(\"image\").notNull(),\n  images: text(\"images\").array().default(sql`ARRAY[]::text[]`),\n  category: text(\"category\").notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  available: boolean(\"available\").notNull().default(true),\n  shipping: text(\"shipping\").notNull().default(\"standard\"),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  customerAddress: text(\"customer_address\").notNull(),\n  items: text(\"items\").notNull(), // JSON string of cart items\n  total: numeric(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const gallery = pgTable(\"gallery\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  path: text(\"path\").notNull(),\n  uploadedAt: text(\"uploaded_at\").notNull(),\n});\n\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGallerySchema = createInsertSchema(gallery).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertSettingsSchema = createInsertSchema(settings).omit({\n  id: true,\n});\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const registerSchema = z.object({\n  username: z.string().min(3),\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n// Cart item schema (client-side only)\nexport const cartItemSchema = z.object({\n  productId: z.string(),\n  quantity: z.number().int().positive(),\n  name: z.string(),\n  price: z.string(),\n  image: z.string(),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertGallery = z.infer<typeof insertGallerySchema>;\nexport type Gallery = typeof gallery.$inferSelect;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\nexport type Settings = typeof settings.$inferSelect;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type CartItem = z.infer<typeof cartItemSchema>;\n","size_bytes":3763},"public/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1060},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\nimport mime from \"mime-types\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n    try {\n      const __filename = fileURLToPath(import.meta.url);\n      const __dirname = path.dirname(__filename);\n      // project public folder is located one level above server/\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"public\",\n        \"index.html\"\n      );\n\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`\n      );\n\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  // ✅ Абсолютный путь к собранному фронтенду\n  const distPath = path.resolve(process.cwd(), \"dist/public\");\n\n  // ✅ Раздаём все файлы из dist/public (включая /assets/)\n  app.use(\n    \"/\",\n    express.static(distPath, {\n      setHeaders: (res, filePath) => {\n        const mimeType = mime.lookup(filePath);\n        if (mimeType) res.setHeader(\"Content-Type\", mimeType);\n      },\n    })\n  );\n\n  // ✅ SPA fallback — отдаём index.html для всех не-API маршрутов\n  app.get(\"*\", (_req, res) => {\n    res.sendFile(path.join(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2644},"public/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1284},"public/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"../components/ui/button\";\nimport { ProductCard } from \"../components/ProductCard\";\nimport { MapComponent } from \"../components/MapComponent\";\nimport { ArrowRight, Shield, Truck, Award, HeadphonesIcon } from \"lucide-react\";\nimport type { Product } from \"../../../shared/schema\";\n\nexport default function Home({\n  onAddToCart,\n}: {\n  onAddToCart: (product: Product) => void;\n}) {\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const featuredProducts = products?.slice(0, 8) || [];\n\n  const categories = [\n    {\n      name: \"Odzież robocza\",\n      slug: \"odziez-robocza\",\n      description: \"Profesjonalne ubrania robocze\",\n    },\n    {\n      name: \"Obuwie BHP\",\n      slug: \"obuwie\",\n      description: \"Bezpieczne buty robocze\",\n    },\n    {\n      name: \"Rękawice\",\n      slug: \"rekawice\",\n      description: \"Rękawice ochronne\",\n    },\n    {\n      name: \"Ochrona głowy\",\n      slug: \"ochrona-glowy\",\n      description: \"Kaski i ochraniacze\",\n    },\n  ];\n\n  const trustBadges = [\n    {\n      icon: Truck,\n      title: \"Szybka dostawa\",\n      description: \"Wysyłka w 24h\",\n      text: \"Zamów dziś, otrzymaj jutro! Gwarantujemy błyskawiczną realizację zamówień.\"\n    },\n    {\n      icon: Shield,\n      title: \"Certyfikowane produkty\",\n      description: \"Zgodne z normami UE\",\n      text: \"Wszystkie produkty posiadają certyfikaty jakości i spełniają normy bezpieczeństwa.\"\n    },\n    {\n      icon: Award,\n      title: \"Najwyższa jakość\",\n      description: \"Sprawdzeni producenci\",\n      text: \"Współpracujemy tylko z renomowanymi producentami znanych marek BHP.\"\n    },\n    {\n      icon: HeadphonesIcon,\n      title: \"Wsparcie klienta\",\n      description: \"Pomoc 24/7\",\n      text: \"Nasz zespół doradców zawsze służy pomocą w doborze odpowiednich produktów.\"\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative bg-black text-white\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/90 to-black/70 z-10\" />\n        <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?w=1920')] bg-cover bg-center opacity-30\" />\n\n        <div className=\"relative z-20 max-w-7xl mx-auto px-4 py-20 md:py-32\">\n          <div className=\"max-w-3xl\">\n            <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight\">\n              <span className=\"text-primary\">Sklep BHP</span> Perfect\n            </h1>\n            <p className=\"text-xl md:text-2xl text-gray-300 mb-8\">\n              Twoje bezpieczeństwo - nasza pasja! Szeroki wybór produktów BHP w najlepszych cenach.\n            </p>\n            <div className=\"flex flex-wrap gap-4\">\n              <Link href=\"/sklep\" data-testid=\"button-shop-now\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-primary text-primary-foreground font-semibold px-8 py-6 text-lg hover:bg-primary/90\"\n                >\n                  Zobacz produkty <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/kontakt\" data-testid=\"button-contact\">\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"backdrop-blur-sm bg-white/10 border-2 border-white text-white hover:bg-white hover:text-black px-8 py-6 text-lg font-semibold\"\n                >\n                  Skontaktuj się z nami\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Categories Grid */}\n      <section className=\"py-16 md:py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-center mb-12 text-black\">\n            Kategorie produktów\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {categories.map((category) => (\n              <Link\n                key={category.slug}\n                href={`/sklep?category=${category.slug}`}\n                className=\"bg-white rounded-lg p-6 shadow-md hover:shadow-xl transition-all hover-elevate active-elevate-2 border-2 border-gray-200 hover:border-primary group\"\n                data-testid={`card-category-${category.slug}`}\n              >\n                <h3 className=\"text-xl font-semibold mb-2 text-black group-hover:text-primary transition-colors\">{category.name}</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">\n                  {category.description}\n                </p>\n                <div className=\"text-primary font-medium flex items-center gap-2 group-hover:gap-3 transition-all\">\n                  Przeglądaj <ArrowRight className=\"h-4 w-4\" />\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16 md:py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-12\">\n            <h2 className=\"text-4xl md:text-5xl font-bold\">\n              Polecane produkty\n            </h2>\n            <Link href=\"/sklep\" data-testid=\"link-view-all\">\n              <Button variant=\"outline\" className=\"hidden md:flex\">\n                Zobacz wszystkie <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </Link>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(8)].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"bg-gray-200 animate-pulse rounded-lg h-96\"\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {featuredProducts.map((product) => (\n                <ProductCard\n                  key={product.id}\n                  product={product}\n                  onAddToCart={onAddToCart}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Trust Badges */}\n      <section className=\"py-16 md:py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {trustBadges.map((badge, index) => (\n              <div\n                key={index}\n                className=\"flex flex-col items-center text-center bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-all border-2 border-gray-200 hover:border-primary\"\n                data-testid={`trust-badge-${index}`}\n              >\n                <div className=\"bg-primary rounded-full p-4 mb-4\">\n                  <badge.icon className=\"h-8 w-8 text-black\" />\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2 text-black\">{badge.title}</h3>\n                <p className=\"text-primary font-medium text-sm mb-3\">\n                  {badge.description}\n                </p>\n                <p className=\"text-gray-600 text-sm leading-relaxed\">\n                  {badge.text}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Location Section */}\n      <section className=\"py-16 md:py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-center mb-12\">\n            Nasza lokalizacja\n          </h2>\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg border-2 border-gray-200\">\n              <MapComponent />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 md:py-20 bg-primary text-black\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Potrzebujesz pomocy w wyborze?\n          </h2>\n          <p className=\"text-xl mb-8\">\n            Nasi specjaliści pomogą Ci dobrać odpowiednie środki ochrony\n            osobistej.\n          </p>\n          <Link href=\"/kontakt\" data-testid=\"button-cta-contact\">\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"bg-black text-white border-2 border-black hover:bg-white hover:text-black font-semibold px-8 py-6 text-lg\"\n            >\n              Skontaktuj się z nami <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8850},"public/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"../../lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":265},"public/src/components/MapComponent.tsx":{"content":"export function MapComponent() {\n  return (\n    <div className=\"w-full\" data-testid=\"map-container\">\n      <iframe\n        src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2434.123!2d20.6697!3d52.4328!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x471ecb5e8e5e8e5e%3A0x5e5e5e5e5e5e5e5e!2sBohater%C3%B3w%20Modlina%2017%2C%2005-100%20Nowy%20Dw%C3%B3r%20Mazowiecki!5e0!3m2!1spl!2spl!4v1234567890\"\n        width=\"100%\"\n        height=\"400\"\n        style={{ border: 0 }}\n        allowFullScreen\n        loading=\"lazy\"\n        referrerPolicy=\"no-referrer-when-downgrade\"\n        title=\"Mapa sklepu - Sklep BHP Pogotowie BHP\"\n        className=\"rounded-lg border-2 border-gray-300\"\n      />\n      <div className=\"mt-6 text-center bg-gray-50 p-4 rounded-lg border border-gray-200\">\n        <p className=\"font-bold text-xl mb-2 text-black\">Sklep BHP Pogotowie BHP</p>\n        <p className=\"text-gray-700 font-medium\">Bohaterów Modlina 17</p>\n        <p className=\"text-gray-700 font-medium\">05-100 Nowy Dwór Mazowiecki</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1062},"public/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Dialog, DialogContent } from \"./dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4875},"public/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"public/src/pages/Gallery.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Gallery as GalleryType } from \"../../../shared/schema\";\n\nexport default function Gallery() {\n  const { data: gallery = [], isLoading } = useQuery<GalleryType[]>({\n    queryKey: [\"/api/gallery\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background py-16\">\n      <div className=\"container mx-auto px-4 max-w-7xl\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-gallery-title\">\n            Galeria <span className=\"text-primary\">Zdjęć</span>\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Zobacz nasze produkty i naszą firmę w akcji\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Ładowanie galerii...</p>\n          </div>\n        ) : gallery.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Brak zdjęć w galerii</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {gallery.map((img, index) => (\n              <div\n                key={img.id}\n                className=\"group relative overflow-hidden rounded-md hover-elevate active-elevate-2 cursor-pointer\"\n                data-testid={`img-gallery-item-${index}`}\n              >\n                <img\n                  src={img.path}\n                  alt={img.filename}\n                  className=\"w-full h-64 object-cover transition-transform duration-300 group-hover:scale-110\"\n                />\n                <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n                  <p className=\"text-white text-sm px-4 text-center break-words\">\n                    {img.filename}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2136},"public/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1908},"public/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3852},"public/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2158},"public/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1588},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport default defineConfig({\n  root: path.resolve(__dirname, \"public\"), // 👈 теперь указываем на public\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"public/src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"), // 👈 билд в dist/public\n    emptyOutDir: true,\n  },\n  server: {\n    port: 5173,\n  },\n});\n","size_bytes":685},"public/src/pages/About.tsx":{"content":"import { Card } from \"../components/ui/card\";\nimport { Shield, Award, Users, Truck } from \"lucide-react\";\n\nexport default function About() {\n  const features = [\n    {\n      icon: Shield,\n      title: \"Bezpieczeństwo\",\n      description: \"Wszystkie produkty spełniają najwyższe normy bezpieczeństwa UE\",\n    },\n    {\n      icon: Award,\n      title: \"Jakość\",\n      description: \"Współpracujemy tylko ze sprawdzonymi producentami\",\n    },\n    {\n      icon: Users,\n      title: \"Doświadczenie\",\n      description: \"Ponad 15 lat doświadczenia w branży BHP\",\n    },\n    {\n      icon: Truck,\n      title: \"Szybka dostawa\",\n      description: \"Wysyłka w 24h do całej Polski\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Hero */}\n      <section className=\"bg-black text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6\">O nas</h1>\n          <p className=\"text-xl md:text-2xl text-gray-300 max-w-3xl mx-auto\">\n            Jesteśmy liderem w dostarczaniu profesjonalnej odzieży roboczej i\n            środków ochrony osobistej w Polsce.\n          </p>\n        </div>\n      </section>\n\n      {/* About Content */}\n      <section className=\"py-16 md:py-20\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center mb-16\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-6\">Nasza misja</h2>\n              <p className=\"text-lg text-muted-foreground mb-4\">\n                Sklep BHP powstał z myślą o bezpieczeństwie pracowników w każdej\n                branży. Od ponad 15 lat dostarczamy najwyższej jakości odzież\n                roboczą, obuwie BHP i środki ochrony osobistej.\n              </p>\n              <p className=\"text-lg text-muted-foreground mb-4\">\n                Nasza siedziba znajduje się w Nowym Dworze Mazowieckim, skąd\n                obsługujemy klientów w całej Polsce. Stawiamy na jakość,\n                bezpieczeństwo i profesjonalną obsługę.\n              </p>\n              <p className=\"text-lg text-muted-foreground\">\n                Współpracujemy tylko ze sprawdzonymi producentami, którzy spełniają\n                wszystkie normy bezpieczeństwa Unii Europejskiej.\n              </p>\n            </div>\n            <div className=\"bg-gray-200 rounded-lg h-96 flex items-center justify-center\">\n              <p className=\"text-muted-foreground\">Zdjęcie magazynu / zespołu</p>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"p-6 text-center hover-elevate\">\n                <div className=\"bg-primary rounded-full p-4 inline-flex mb-4\">\n                  <feature.icon className=\"h-8 w-8 text-black\" />\n                </div>\n                <h3 className=\"font-semibold text-xl mb-2\">{feature.title}</h3>\n                <p className=\"text-muted-foreground\">{feature.description}</p>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Location */}\n      <section className=\"py-16 md:py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Nasza lokalizacja</h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Sklep BHP\n            <br />\n            Nowy Dwór Mazowiecki, Poland\n          </p>\n          <p className=\"text-muted-foreground\">\n            Zapraszamy do odwiedzenia naszego sklepu stacjonarnego lub kontaktu\n            przez email i telefon.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":3845},"scripts/replace-aliases.js":{"content":"#!/usr/bin/env node\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst glob = require(\"glob\");\n\nconst root = path.resolve(__dirname, \"..\");\nconst publicSrc = path.join(root, \"public\", \"src\");\nconst shared = path.join(root, \"shared\");\n\nfunction replaceInFile(file) {\n  let code = fs.readFileSync(file, \"utf8\");\n  const dir = path.dirname(file);\n  let changed = false;\n\n  // @/ -> public/src\n  code = code.replace(/from\\s+([\"'])@\\/(.*?)\\1/g, (m, q, p) => {\n    const target = path.join(publicSrc, p);\n    let rel = path.relative(dir, target);\n    if (!rel.startsWith(\".\")) rel = \"./\" + rel;\n    rel = rel.replace(/\\\\/g, \"/\");\n    changed = true;\n    return `from ${q}${rel}${q}`;\n  });\n\n  // @shared/ -> shared\n  code = code.replace(/from\\s+([\"'])@shared\\/(.*?)\\1/g, (m, q, p) => {\n    const target = path.join(shared, p);\n    let rel = path.relative(dir, target);\n    if (!rel.startsWith(\".\")) rel = \"./\" + rel;\n    rel = rel.replace(/\\\\/g, \"/\");\n    changed = true;\n    return `from ${q}${rel}${q}`;\n  });\n\n  if (changed) {\n    fs.writeFileSync(file, code, \"utf8\");\n    console.log(\"Updated\", path.relative(root, file));\n  }\n}\n\nfunction run() {\n  const patterns = [\n    \"public/src/**/*.{ts,tsx,js,jsx}\",\n    \"server/**/*.ts\",\n    \"shared/**/*.ts\",\n  ];\n  patterns.forEach((p) => {\n    const files = glob.sync(p, { cwd: root, absolute: true, nodir: true });\n    files.forEach(replaceInFile);\n  });\n}\n\nrun();\nconsole.log(\"Done\");\n","size_bytes":1440},"public/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3025},"public/src/pages/Cart.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"../components/ui/button\";\nimport { Card } from \"../components/ui/card\";\nimport { Input } from \"../components/ui/input\";\nimport { ShoppingBag, Trash2, Plus, Minus, ArrowRight } from \"lucide-react\";\nimport type { CartItem } from \"../../../shared/schema\";\n\nexport default function Cart({\n  cartItems,\n  onUpdateQuantity,\n  onRemoveItem,\n}: {\n  cartItems: CartItem[];\n  onUpdateQuantity: (productId: string, quantity: number) => void;\n  onRemoveItem: (productId: string) => void;\n}) {\n  const subtotal = cartItems.reduce(\n    (sum, item) => sum + parseFloat(item.price) * item.quantity,\n    0\n  );\n  const shipping = subtotal > 300 ? 0 : 19.99;\n  const total = subtotal + shipping;\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center py-16\">\n        <ShoppingBag className=\"h-24 w-24 text-muted-foreground mb-6\" />\n        <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-empty-cart\">\n          Twój koszyk jest pusty\n        </h1>\n        <p className=\"text-muted-foreground text-lg mb-8\">\n          Dodaj produkty do koszyka, aby kontynuować zakupy\n        </p>\n        <Link href=\"/sklep\" data-testid=\"button-continue-shopping\">\n          <Button size=\"lg\" className=\"bg-primary text-primary-foreground\">\n            Kontynuuj zakupy\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <h1 className=\"text-4xl md:text-5xl font-bold mb-8\">Koszyk</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {cartItems.map((item) => (\n              <Card\n                key={item.productId}\n                className=\"p-4 hover-elevate\"\n                data-testid={`cart-item-${item.productId}`}\n              >\n                <div className=\"flex gap-4\">\n                  <img\n                    src={item.image}\n                    alt={item.name}\n                    className=\"w-24 h-24 object-cover rounded-md bg-gray-100\"\n                    data-testid={`img-cart-${item.productId}`}\n                  />\n                  \n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-lg mb-1\" data-testid={`text-cart-name-${item.productId}`}>\n                      {item.name}\n                    </h3>\n                    <p className=\"text-primary font-bold text-xl mb-3\" data-testid={`text-cart-price-${item.productId}`}>\n                      {parseFloat(item.price).toFixed(2)} zł\n                    </p>\n\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-8 w-8\"\n                          onClick={() =>\n                            onUpdateQuantity(item.productId, item.quantity - 1)\n                          }\n                          disabled={item.quantity <= 1}\n                          data-testid={`button-decrease-${item.productId}`}\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={item.quantity}\n                          onChange={(e) =>\n                            onUpdateQuantity(\n                              item.productId,\n                              Math.max(1, parseInt(e.target.value) || 1)\n                            )\n                          }\n                          className=\"w-16 text-center h-8\"\n                          data-testid={`input-quantity-${item.productId}`}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-8 w-8\"\n                          onClick={() =>\n                            onUpdateQuantity(item.productId, item.quantity + 1)\n                          }\n                          data-testid={`button-increase-${item.productId}`}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-destructive hover:text-destructive\"\n                        onClick={() => onRemoveItem(item.productId)}\n                        data-testid={`button-remove-${item.productId}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Usuń\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-xl\" data-testid={`text-subtotal-${item.productId}`}>\n                      {(parseFloat(item.price) * item.quantity).toFixed(2)} zł\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"p-6 sticky top-20\">\n              <h2 className=\"text-2xl font-bold mb-6\">Podsumowanie</h2>\n              \n              <div className=\"space-y-3 mb-6\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Suma częściowa</span>\n                  <span className=\"font-semibold\" data-testid=\"text-subtotal\">\n                    {subtotal.toFixed(2)} zł\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Dostawa</span>\n                  <span className=\"font-semibold\" data-testid=\"text-shipping\">\n                    {shipping === 0 ? \"Gratis\" : `${shipping.toFixed(2)} zł`}\n                  </span>\n                </div>\n                {subtotal < 300 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Dodaj produkty za {(300 - subtotal).toFixed(2)} zł, aby otrzymać darmową dostawę\n                  </p>\n                )}\n                <div className=\"border-t pt-3\">\n                  <div className=\"flex justify-between text-xl font-bold\">\n                    <span>Razem</span>\n                    <span data-testid=\"text-total\">{total.toFixed(2)} zł</span>\n                  </div>\n                </div>\n              </div>\n\n              <Link href=\"/zamowienie\" className=\"block mb-4\" data-testid=\"link-checkout\">\n                <Button size=\"lg\" className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 font-semibold\">\n                  Przejdź do kasy <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n\n              <Link href=\"/sklep\" className=\"block\" data-testid=\"link-continue-shopping\">\n                <Button variant=\"outline\" size=\"lg\" className=\"w-full\">\n                  Kontynuuj zakupy\n                </Button>\n              </Link>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7536},"public/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":795},"public/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"../../lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10485},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertProductSchema,\n  insertOrderSchema,\n  loginSchema,\n  registerSchema,\n  insertGallerySchema,\n} from \"../shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { nanoid } from \"nanoid\";\n\nconst JWT_SECRET =\n  process.env.JWT_SECRET || \"your-secret-key-change-in-production\";\n\n// Authentication middleware\nconst authMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      return res.status(401).json({ error: \"No token provided\" });\n    }\n\n    const token = authHeader.split(\" \")[1];\n    const decoded = jwt.verify(token, JWT_SECRET) as { id: string; email: string; isAdmin: boolean };\n    \n    (req as any).user = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: \"Invalid token\" });\n  }\n};\n\n// Admin-only middleware\nconst adminMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  const user = (req as any).user;\n  if (!user || !user.isAdmin) {\n    return res.status(403).json({ error: \"Admin access required\" });\n  }\n  next();\n};\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"public\", \"uploads\");\nfs.mkdirSync(uploadDir, { recursive: true });\n\nconst storage_multer = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const ext = path.extname(file.originalname);\n    const filename = `${Date.now()}-${nanoid(6)}${ext}`;\n    cb(null, filename);\n  },\n});\n\nconst upload = multer({ \n  storage: storage_multer,\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif|webp/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (extname && mimetype) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only image files are allowed\"));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", authMiddleware, adminMiddleware, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      const images = files ? files.map(f => `/uploads/${f.filename}`) : [];\n      \n      // Coerce form data strings to proper types\n      const productData = {\n        ...req.body,\n        price: Number(req.body.price) || 0,\n        stock: Number(req.body.stock) || 0,\n        available: req.body.available === \"true\" || req.body.available === true,\n        shipping: req.body.shipping || \"standard\",\n        images: images.length > 0 ? images : [],\n      };\n      \n      const validatedData = insertProductSchema.parse(productData);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid product data\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.put(\"/api/products/:id\", authMiddleware, adminMiddleware, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      const newImages = files ? files.map(f => `/uploads/${f.filename}`) : [];\n      \n      const existingProduct = await storage.getProduct(req.params.id);\n      if (!existingProduct) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      const images = [...(existingProduct.images || []), ...newImages];\n      \n      // Coerce form data strings to proper types\n      const updateData = {\n        ...req.body,\n        price: req.body.price !== undefined ? Number(req.body.price) : undefined,\n        stock: req.body.stock !== undefined ? Number(req.body.stock) : undefined,\n        available: req.body.available !== undefined ? (req.body.available === \"true\" || req.body.available === true) : undefined,\n        shipping: req.body.shipping,\n        images,\n      };\n      \n      const product = await storage.updateProduct(req.params.id, updateData);\n      \n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid product data\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", authMiddleware, adminMiddleware, async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  // Order routes\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validatedData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder({\n        ...validatedData,\n        status: \"pending\",\n      });\n      res.status(201).json(order);\n    } catch {\n      res.status(400).json({ error: \"Invalid order data\" });\n    }\n  });\n\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username: validatedData.username,\n        email: validatedData.email,\n        password: hashedPassword,\n        isAdmin: false,\n      });\n\n      // Generate JWT\n      const token = jwt.sign(\n        { id: user.id, email: user.email, isAdmin: user.isAdmin },\n        JWT_SECRET,\n        { expiresIn: \"7d\" }\n      );\n\n      res.status(201).json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          isAdmin: user.isAdmin,\n        },\n        token,\n      });\n    } catch {\n      res.status(400).json({ error: \"Invalid registration data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n\n      // Find user\n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(\n        validatedData.password,\n        user.password\n      );\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Generate JWT\n      const token = jwt.sign(\n        { id: user.id, email: user.email, isAdmin: user.isAdmin },\n        JWT_SECRET,\n        { expiresIn: \"7d\" }\n      );\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          isAdmin: user.isAdmin,\n        },\n        token,\n      });\n    } catch {\n      res.status(400).json({ error: \"Invalid login data\" });\n    }\n  });\n\n  // Gallery routes\n  app.get(\"/api/gallery\", async (req, res) => {\n    try {\n      const images = await storage.getAllGalleryImages();\n      res.json(images);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch gallery images\" });\n    }\n  });\n\n  app.post(\"/api/gallery\", authMiddleware, adminMiddleware, upload.single(\"image\"), async (req, res) => {\n    try {\n      const file = req.file;\n      if (!file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const galleryImage = await storage.createGalleryImage({\n        filename: file.filename,\n        path: `/uploads/${file.filename}`,\n      });\n      res.status(201).json(galleryImage);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to upload image\" });\n    }\n  });\n\n  app.delete(\"/api/gallery/:id\", authMiddleware, adminMiddleware, async (req, res) => {\n    try {\n      const image = (await storage.getAllGalleryImages()).find(img => img.id === req.params.id);\n      if (image) {\n        // Delete file from filesystem\n        const filePath = path.join(uploadDir, path.basename(image.path));\n        if (fs.existsSync(filePath)) {\n          fs.unlinkSync(filePath);\n        }\n      }\n      await storage.deleteGalleryImage(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete image\" });\n    }\n  });\n\n  // Settings routes\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getAllSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.get(\"/api/settings/:key\", async (req, res) => {\n    try {\n      const setting = await storage.getSetting(req.params.key);\n      if (!setting) {\n        return res.status(404).json({ error: \"Setting not found\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch setting\" });\n    }\n  });\n\n  app.put(\"/api/settings/:key\", authMiddleware, adminMiddleware, async (req, res) => {\n    try {\n      const { value } = req.body;\n      if (!value) {\n        return res.status(400).json({ error: \"Value is required\" });\n      }\n      const setting = await storage.setSetting(req.params.key, value);\n      res.json(setting);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update setting\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":10867},"public/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4849},"design_guidelines.md":{"content":"# Design Guidelines: Sklep BHP E-Commerce Platform\n\n## Design Approach\n**Utility-Focused E-Commerce** - Industrial strength meets modern polish. This B2B/B2C safety equipment store prioritizes clarity, trust, and efficiency while maintaining visual appeal through bold color contrast and clean layouts.\n\n**Reference Inspiration**: Drawing from Amazon's clarity + Shopify's clean product presentation + WorkwearOutfitters' industrial aesthetic.\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Primary Colors:**\n- Black: `0 0% 0%` - Primary backgrounds, text, headers\n- Yellow: `48 100% 50%` - CTAs, accents, highlights, active states\n- White: `0 0% 100%` - Secondary backgrounds, cards\n\n**Supporting Colors:**\n- Gray 900: `0 0% 15%` - Dark sections, footer\n- Gray 800: `0 0% 20%` - Card backgrounds on dark\n- Gray 100: `0 0% 96%` - Light section backgrounds\n- Gray 600: `0 0% 45%` - Secondary text\n- Red 600: `0 72% 51%` - Error states, urgency indicators\n- Green 600: `142 71% 45%` - Success, in-stock indicators\n\n**Dark Mode Strategy:**\n- Default to light mode for product visibility\n- Dark sections for visual rhythm (hero, footer)\n- High contrast maintained throughout\n\n### B. Typography\n\n**Font Stack:**\n- Primary: 'Inter' (Google Fonts) - Clean, professional, excellent readability\n- Headings: 'Inter' weight 700-800\n- Body: 'Inter' weight 400-500\n- Accent: 'Inter' weight 600 for buttons/labels\n\n**Scale:**\n- H1: text-5xl lg:text-6xl font-bold\n- H2: text-4xl lg:text-5xl font-bold\n- H3: text-2xl lg:text-3xl font-semibold\n- H4: text-xl font-semibold\n- Body: text-base\n- Small: text-sm\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units 2, 4, 8, 12, 16, 20\n- Micro spacing: p-2, gap-2\n- Component internal: p-4, gap-4\n- Section padding: py-12 md:py-16 lg:py-20\n- Container margins: mx-4 md:mx-8\n\n**Grid System:**\n- Container: max-w-7xl mx-auto px-4\n- Product grids: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\n- Feature sections: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n\n### D. Component Library\n\n**Navigation:**\n- Sticky header with black background\n- Yellow logo accent or yellow underline on active nav items\n- Mobile: Hamburger menu, black slide-out panel\n- Desktop: Horizontal nav with hover yellow underline\n\n**Hero Section:**\n- Full-width with dark background (black or gray-900)\n- Large heading in white with yellow keyword highlights\n- Yellow CTA button (bg-yellow-400 text-black)\n- Background: Industrial texture or safety equipment imagery\n\n**Product Cards:**\n- White background with subtle shadow (shadow-md)\n- Product image with hover scale effect (hover:scale-105 transition)\n- Price in large bold text\n- Yellow \"Add to Cart\" button\n- Stock indicator: Green dot + \"W magazynie\" or Red + \"Brak\"\n- Category badge in top-right\n\n**Buttons:**\n- Primary: bg-yellow-400 text-black font-semibold px-8 py-3 rounded-lg hover:bg-yellow-500\n- Secondary: border-2 border-yellow-400 text-yellow-400 hover:bg-yellow-400 hover:text-black\n- Outline on images: backdrop-blur-sm bg-black/30 border-2 border-white text-white\n\n**Forms:**\n- Input fields: border-gray-300 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/20\n- Labels: text-sm font-medium text-gray-700\n- Error states: border-red-500 text-red-600\n\n**Footer:**\n- Black background with yellow accents\n- Multi-column layout: Company info, Quick links, Categories, Contact\n- White text with yellow highlights on hover\n- Location prominently displayed: \"Nowy Dwór Mazowiecki, Poland\"\n\n### E. Page-Specific Layouts\n\n**Homepage:**\n1. Hero: Full-width black background, bold headline, yellow CTA\n2. Category Grid: 4 cards with category icons/images\n3. Featured Products: 4-8 products in grid\n4. Trust Badges: Certifications, shipping info, returns (icons + text)\n5. CTA Section: Yellow background, black text, final conversion push\n\n**Product Catalog (/shop):**\n- Left sidebar: Category filters, price range, stock filter\n- Right main: Product grid with sorting options\n- Breadcrumbs at top\n- Pagination at bottom\n\n**Product Detail (/product/:id):**\n- Left: Large product image with gallery thumbnails\n- Right: Name, price, stock status, quantity selector, Add to Cart\n- Below: Tabs for Description, Specifications, Reviews\n\n**Cart:**\n- Table layout: Product image, name, price, quantity, subtotal\n- Right sidebar: Order summary, promo code, checkout button\n- Empty cart state: Icon + message + \"Kontynuuj zakupy\" link\n\n**Checkout:**\n- Two-column: Left form (contact, shipping, payment), Right summary\n- Progress indicator: Koszyk → Dostawa → Płatność → Potwierdzenie\n- Yellow submit button: \"Złóż zamówienie\"\n\n---\n\n## Images\n\n**Hero Section:**\n- Large background image: Industrial warehouse or safety equipment in organized shelving (70% opacity overlay)\n- Alternative: Worker in high-vis gear with hard hat, industrial setting\n\n**Category Cards:**\n- Workwear: Coveralls on mannequin\n- Safety Equipment: Hard hats and safety glasses\n- Footwear: Steel-toe boots\n- Gloves: Various work gloves display\n- Protective Gear: Face shields and respirators\n\n**Product Images:**\n- Clean white background\n- Front view primary, detail shots in gallery\n- Consistent sizing: 600x600px minimum\n\n**Trust Section:**\n- Icons for: Fast shipping, 30-day returns, certified products, customer support (use Heroicons)\n\n---\n\n## Polish Language Elements\n\n- All UI text in Polish\n- Currency: PLN (zł)\n- Common terms: \"Dodaj do koszyka\", \"Kontynuuj zakupy\", \"Złóż zamówienie\", \"W magazynie\"\n- Address format: Nowy Dwór Mazowiecki, Poland (footer + contact)\n\n---\n\n## Key Interactions\n\n- Product card hover: Slight lift (shadow-lg) + image scale\n- Cart icon: Yellow badge with item count\n- Sticky header: Reduces padding on scroll\n- Loading states: Yellow spinner on black background\n- Toast notifications: Black background, yellow border, positioned top-right\n\nThis industrial-strength design balances professional B2B aesthetics with modern e-commerce UX, using the distinctive black-yellow palette to create memorable brand identity while maintaining excellent usability for Polish customers.","size_bytes":6087},"public/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"public/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"../../hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"./toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":762},"public/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1255},"public/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1727},"public/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* BHP PERFEKT THEME - BLACK & YELLOW (#0b0b0b & #ffd000) */\n:root {\n  --button-outline: rgba(255, 255, 255, 0.1);\n  --badge-outline: rgba(255, 255, 255, 0.05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: 9; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255, 255, 255, 0.04);\n  --elevate-2: rgba(255, 255, 255, 0.09);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 9%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 9%;\n\n  --card-border: 0 0% 88%;\n\n  --sidebar: 0 0% 6%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 0 0% 12%;\n\n  --sidebar-primary: 48 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 4%;\n\n  --sidebar-accent: 0 0% 12%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 48 100% 50%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 0 0% 9%;\n\n  --popover-border: 0 0% 88%;\n\n  --primary: 48 100% 50%;\n\n  --primary-foreground: 0 0% 4%;\n\n  --secondary: 0 0% 96%;\n\n  --secondary-foreground: 0 0% 9%;\n\n  --muted: 0 0% 96%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 48 95% 96%;\n\n  --accent-foreground: 0 0% 9%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 88%;\n  --ring: 48 100% 50%;\n  --chart-1: 48 100% 50%;\n  --chart-2: 0 0% 98%;\n  --chart-3: 48 95% 70%;\n  --chart-4: 0 0% 60%;\n  --chart-5: 48 100% 35%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.35);\n  --shadow-sm:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.45);\n  --shadow:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.5);\n  --shadow-md:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.45), 0px 2px 4px -1px hsl(0 0% 0% / 0.55);\n  --shadow-lg:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.5), 0px 4px 6px -1px hsl(0 0% 0% / 0.6);\n  --shadow-xl:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.55), 0px 8px 10px -1px hsl(0 0% 0% / 0.65);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.7);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(\n    from hsl(var(--sidebar-primary)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(\n    from hsl(var(--sidebar-accent)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(\n    from hsl(var(--primary)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(\n    from hsl(var(--secondary)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(\n    from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) /\n      alpha\n  );\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(\n    from hsl(var(--accent)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(\n    from hsl(var(--destructive)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n}\n\n.dark {\n  --button-outline: rgba(255, 255, 255, 0.1);\n  --badge-outline: rgba(255, 255, 255, 0.05);\n\n  --opaque-button-border-intensity: 9; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255, 255, 255, 0.04);\n  --elevate-2: rgba(255, 255, 255, 0.09);\n\n  --background: 0 0% 9%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 12%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 15%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 0 0% 19%;\n\n  --sidebar-primary: 48 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 9%;\n\n  --sidebar-accent: 0 0% 20%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 48 100% 50%;\n\n  --popover: 0 0% 18%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 0 0% 22%;\n\n  --primary: 48 100% 50%;\n\n  --primary-foreground: 0 0% 9%;\n\n  --secondary: 0 0% 22%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 0 2% 20%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 48 12% 18%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 28%;\n  --ring: 48 100% 50%;\n  --chart-1: 0 0% 98%;\n  --chart-2: 48 100% 60%;\n  --chart-3: 0 0% 75%;\n  --chart-4: 48 95% 70%;\n  --chart-5: 0 0% 60%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.35);\n  --shadow-sm:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.45);\n  --shadow:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.5);\n  --shadow-md:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.45), 0px 2px 4px -1px hsl(0 0% 0% / 0.55);\n  --shadow-lg:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.5), 0px 4px 6px -1px hsl(0 0% 0% / 0.6);\n  --shadow-xl:\n    0px 2px 0px 0px hsl(0 0% 0% / 0.55), 0px 8px 10px -1px hsl(0 0% 0% / 0.65);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.7);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(\n    from hsl(var(--sidebar-primary)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n  --sidebar-accent-border: hsl(\n    from hsl(var(--sidebar-accent)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n  --primary-border: hsl(\n    from hsl(var(--primary)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n  --secondary-border: hsl(\n    from hsl(var(--secondary)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n  --muted-border: hsl(\n    from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) /\n      alpha\n  );\n  --accent-border: hsl(\n    from hsl(var(--accent)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n  --destructive-border: hsl(\n    from hsl(var(--destructive)) h s\n      calc(l + var(--opaque-button-border-intensity)) / alpha\n  );\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n","size_bytes":10793},"public/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Label } from \"./label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4110},"public/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"public/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"public/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2769},"public/src/pages/ProductDetail.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"../components/ui/button\";\nimport { Badge } from \"../components/ui/badge\";\nimport { Input } from \"../components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../components/ui/tabs\";\nimport { ArrowLeft, ShoppingCart, Minus, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { Product } from \"../../../shared/schema\";\n\nexport default function ProductDetail({\n  onAddToCart,\n}: {\n  onAddToCart: (product: Product, quantity: number) => void;\n}) {\n  const { id } = useParams();\n  const [quantity, setQuantity] = useState(1);\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [`/api/products/${id}`],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex flex-col items-center justify-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">Produkt nie znaleziony</h1>\n        <Link href=\"/sklep\" data-testid=\"link-back-to-shop\">\n          <Button variant=\"outline\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Wróć do sklepu\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  const inStock = parseInt(product.stock.toString()) > 0;\n  const price = parseFloat(product.price.toString());\n\n  const handleQuantityChange = (delta: number) => {\n    const newQuantity = Math.max(1, Math.min(parseInt(product.stock.toString()), quantity + delta));\n    setQuantity(newQuantity);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Breadcrumbs */}\n        <div className=\"mb-8\">\n          <Link href=\"/sklep\" className=\"text-primary hover:underline flex items-center gap-2\" data-testid=\"link-breadcrumb-shop\">\n            <ArrowLeft className=\"h-4 w-4\" /> Wróć do sklepu\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Product Image Placeholder */}\n          <div className=\"bg-white rounded-lg shadow-md p-8\">\n            <div className=\"relative aspect-square bg-gray-100 rounded-lg flex items-center justify-center border border-gray-200\">\n              <div className=\"text-gray-300 text-9xl\">📦</div>\n            </div>\n          </div>\n\n          {/* Product Info */}\n          <div className=\"bg-white rounded-lg shadow-md p-8\">\n            <Badge className=\"mb-4\" data-testid=\"badge-category\">\n              {product.category}\n            </Badge>\n            \n            <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-product-name\">\n              {product.name}\n            </h1>\n\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div\n                className={`h-3 w-3 rounded-full ${\n                  inStock ? \"bg-green-600\" : \"bg-red-600\"\n                }`}\n              />\n              <span className=\"text-lg font-medium\" data-testid=\"text-stock-status\">\n                {inStock ? `W magazynie (${product.stock} szt.)` : \"Brak w magazynie\"}\n              </span>\n            </div>\n\n            <div className=\"mb-8\">\n              <span className=\"text-5xl font-bold\" data-testid=\"text-product-price\">\n                {price.toFixed(2)} zł\n              </span>\n            </div>\n\n            {/* Quantity Selector */}\n            {inStock && (\n              <div className=\"mb-6\">\n                <label className=\"text-sm font-medium mb-2 block\">Ilość</label>\n                <div className=\"flex items-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleQuantityChange(-1)}\n                    disabled={quantity <= 1}\n                    data-testid=\"button-decrease-quantity\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    max={product.stock.toString()}\n                    value={quantity}\n                    onChange={(e) => setQuantity(Math.max(1, Math.min(parseInt(product.stock.toString()), parseInt(e.target.value) || 1)))}\n                    className=\"w-20 text-center\"\n                    data-testid=\"input-quantity\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleQuantityChange(1)}\n                    disabled={quantity >= parseInt(product.stock.toString())}\n                    data-testid=\"button-increase-quantity\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Add to Cart Button */}\n            <Button\n              size=\"lg\"\n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 font-semibold py-6 text-lg mb-4\"\n              disabled={!inStock}\n              onClick={() => onAddToCart(product, quantity)}\n              data-testid=\"button-add-to-cart\"\n            >\n              <ShoppingCart className=\"mr-2 h-5 w-5\" />\n              Dodaj do koszyka\n            </Button>\n\n            <Link href=\"/koszyk\" className=\"block\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"w-full py-6 text-lg font-semibold\"\n                data-testid=\"button-go-to-cart\"\n              >\n                Przejdź do koszyka\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Product Details Tabs */}\n        <div className=\"mt-12 bg-white rounded-lg shadow-md p-8\">\n          <Tabs defaultValue=\"description\" className=\"w-full\">\n            <TabsList className=\"w-full justify-start border-b\">\n              <TabsTrigger value=\"description\" data-testid=\"tab-description\">\n                Opis\n              </TabsTrigger>\n              <TabsTrigger value=\"specifications\" data-testid=\"tab-specifications\">\n                Specyfikacja\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"description\" className=\"pt-6\">\n              <p className=\"text-base leading-relaxed\" data-testid=\"text-description\">\n                {product.description}\n              </p>\n            </TabsContent>\n            \n            <TabsContent value=\"specifications\" className=\"pt-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex border-b pb-2\">\n                  <span className=\"font-medium w-40\">Kategoria:</span>\n                  <span>{product.category}</span>\n                </div>\n                <div className=\"flex border-b pb-2\">\n                  <span className=\"font-medium w-40\">Dostępność:</span>\n                  <span>{inStock ? \"W magazynie\" : \"Brak\"}</span>\n                </div>\n                <div className=\"flex border-b pb-2\">\n                  <span className=\"font-medium w-40\">Stan magazynowy:</span>\n                  <span>{product.stock} szt.</span>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7496},"public/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"public/src/pages/AdminPanel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"../lib/queryClient\";\nimport { Card } from \"../components/ui/card\";\nimport { Button } from \"../components/ui/button\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport { Textarea } from \"../components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../components/ui/tabs\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"../components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../components/ui/select\";\nimport { Switch } from \"../components/ui/switch\";\nimport { Pencil, Trash2, Plus, Upload, LogOut, Settings as SettingsIcon, Image as ImageIcon } from \"lucide-react\";\nimport type { Product, Gallery, Settings } from \"../../../shared/schema\";\n\nexport default function AdminPanel() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [user, setUser] = useState<any>(null);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem(\"user\");\n    if (savedUser) {\n      const parsedUser = JSON.parse(savedUser);\n      setUser(parsedUser);\n      if (!parsedUser.isAdmin) {\n        toast({\n          title: \"Brak dostępu\",\n          description: \"Tylko administratorzy mogą uzyskać dostęp do tego panelu\",\n          variant: \"destructive\",\n        });\n        setLocation(\"/\");\n      }\n    } else {\n      setLocation(\"/admin/login\");\n    }\n  }, []);\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: gallery = [], isLoading: galleryLoading } = useQuery<Gallery[]>({\n    queryKey: [\"/api/gallery\"],\n  });\n\n  const { data: settings = [], isLoading: settingsLoading } = useQuery<Settings[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/products/${id}`, {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Produkt usunięty\" });\n    },\n  });\n\n  const deleteGalleryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/gallery/${id}`, {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete gallery image\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/gallery\"] });\n      toast({ title: \"Zdjęcie usunięte\" });\n    },\n  });\n\n  const uploadGalleryMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const token = localStorage.getItem(\"token\");\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      \n      const response = await fetch(\"/api/gallery\", {\n        method: \"POST\",\n        headers: { Authorization: `Bearer ${token}` },\n        body: formData,\n      });\n      \n      if (!response.ok) throw new Error(\"Upload failed\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/gallery\"] });\n      toast({ title: \"Zdjęcie przesłane\" });\n    },\n  });\n\n  const updateSettingMutation = useMutation({\n    mutationFn: async ({ key, value }: { key: string; value: string }) => {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/settings/${key}`, {\n        method: \"PUT\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}` \n        },\n        body: JSON.stringify({ value }),\n      });\n      if (!response.ok) throw new Error(\"Failed to update setting\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({ title: \"Ustawienie zaktualizowane\" });\n    },\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setLocation(\"/admin/login\");\n  };\n\n  const handleGalleryUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      uploadGalleryMutation.mutate(file);\n    }\n  };\n\n  const getSetting = (key: string) => {\n    return settings.find(s => s.key === key)?.value || \"\";\n  };\n\n  if (!user) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Ładowanie...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background py-8\">\n      <div className=\"container mx-auto px-4 max-w-7xl\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold\" data-testid=\"text-admin-title\">Panel Administracyjny</h1>\n            <p className=\"text-muted-foreground\">Witaj, {user?.username}</p>\n          </div>\n          <Button variant=\"outline\" onClick={handleLogout} data-testid=\"button-logout\">\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Wyloguj\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"products\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">\n              <Package className=\"mr-2 h-4 w-4\" />\n              Produkty\n            </TabsTrigger>\n            <TabsTrigger value=\"gallery\" data-testid=\"tab-gallery\">\n              <ImageIcon className=\"mr-2 h-4 w-4\" />\n              Galeria\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n              <SettingsIcon className=\"mr-2 h-4 w-4\" />\n              Ustawienia\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"mt-6\">\n            <Card className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold\">Zarządzanie Produktami</h2>\n                <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button onClick={() => setEditingProduct(null)} data-testid=\"button-add-product\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Dodaj Produkt\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingProduct ? \"Edytuj Produkt\" : \"Dodaj Nowy Produkt\"}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <ProductForm\n                      product={editingProduct}\n                      onClose={() => {\n                        setIsProductDialogOpen(false);\n                        setEditingProduct(null);\n                      }}\n                    />\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {productsLoading ? (\n                <p>Ładowanie...</p>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Zdjęcie</TableHead>\n                      <TableHead>Nazwa</TableHead>\n                      <TableHead>Cena</TableHead>\n                      <TableHead>Kategoria</TableHead>\n                      <TableHead>Stan</TableHead>\n                      <TableHead className=\"text-right\">Akcje</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {products.map((product) => (\n                      <TableRow key={product.id} data-testid={`row-product-${product.id}`}>\n                        <TableCell>\n                          <img src={product.image} alt={product.name} className=\"h-12 w-12 object-cover rounded\" />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">{product.name}</TableCell>\n                        <TableCell>{product.price} zł</TableCell>\n                        <TableCell>{product.category}</TableCell>\n                        <TableCell>{product.stock} szt.</TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => {\n                              setEditingProduct(product);\n                              setIsProductDialogOpen(true);\n                            }}\n                            data-testid={`button-edit-${product.id}`}\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => deleteProductMutation.mutate(product.id)}\n                            data-testid={`button-delete-${product.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"gallery\" className=\"mt-6\">\n            <Card className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold\">Galeria</h2>\n                <Button asChild data-testid=\"button-upload-gallery\">\n                  <label className=\"cursor-pointer\">\n                    <Upload className=\"mr-2 h-4 w-4 inline\" />\n                    Prześlij Zdjęcie\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleGalleryUpload}\n                    />\n                  </label>\n                </Button>\n              </div>\n\n              {galleryLoading ? (\n                <p>Ładowanie...</p>\n              ) : (\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {gallery.map((img) => (\n                    <div key={img.id} className=\"relative group\" data-testid={`img-gallery-${img.id}`}>\n                      <img src={img.path} alt={img.filename} className=\"w-full h-48 object-cover rounded\" />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => deleteGalleryMutation.mutate(img.id)}\n                        data-testid={`button-delete-gallery-${img.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"mt-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-bold mb-6\">Ustawienia Strony</h2>\n              \n              {settingsLoading ? (\n                <p>Ładowanie...</p>\n              ) : (\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label>Nazwa Sklepu</Label>\n                    <Input\n                      defaultValue={getSetting(\"siteName\")}\n                      onBlur={(e) => updateSettingMutation.mutate({ key: \"siteName\", value: e.target.value })}\n                      data-testid=\"input-site-name\"\n                    />\n                  </div>\n\n                  <div className=\"border-t pt-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Banner Promocyjny</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={getSetting(\"bannerShow\") === \"true\"}\n                          onCheckedChange={(checked) =>\n                            updateSettingMutation.mutate({ key: \"bannerShow\", value: checked.toString() })\n                          }\n                          data-testid=\"switch-banner-show\"\n                        />\n                        <Label>Pokaż banner</Label>\n                      </div>\n                      \n                      <div>\n                        <Label>Tekst banneru</Label>\n                        <Input\n                          defaultValue={getSetting(\"bannerText\")}\n                          onBlur={(e) => updateSettingMutation.mutate({ key: \"bannerText\", value: e.target.value })}\n                          data-testid=\"input-banner-text\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label>Link banneru</Label>\n                        <Input\n                          defaultValue={getSetting(\"bannerLink\")}\n                          onBlur={(e) => updateSettingMutation.mutate({ key: \"bannerLink\", value: e.target.value })}\n                          data-testid=\"input-banner-link\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nfunction ProductForm({ product, onClose }: { product: Product | null; onClose: () => void }) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: product?.name || \"\",\n    description: product?.description || \"\",\n    price: product?.price || \"\",\n    category: product?.category || \"\",\n    stock: product?.stock || 0,\n    image: product?.image || \"\",\n    available: product?.available ?? true,\n    shipping: product?.shipping || \"standard\",\n  });\n  const [imageFiles, setImageFiles] = useState<FileList | null>(null);\n\n  const createProductMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem(\"token\");\n      const fd = new FormData();\n      \n      Object.entries(formData).forEach(([key, value]) => {\n        fd.append(key, value.toString());\n      });\n      \n      if (imageFiles) {\n        Array.from(imageFiles).forEach(file => {\n          fd.append(\"images\", file);\n        });\n      }\n\n      const response = await fetch(\"/api/products\", {\n        method: \"POST\",\n        headers: { Authorization: `Bearer ${token}` },\n        body: fd,\n      });\n\n      if (!response.ok) throw new Error(\"Failed to create product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Produkt utworzony\" });\n      onClose();\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem(\"token\");\n      const fd = new FormData();\n      \n      Object.entries(formData).forEach(([key, value]) => {\n        fd.append(key, value.toString());\n      });\n      \n      if (imageFiles) {\n        Array.from(imageFiles).forEach(file => {\n          fd.append(\"images\", file);\n        });\n      }\n\n      const response = await fetch(`/api/products/${product?.id}`, {\n        method: \"PUT\",\n        headers: { Authorization: `Bearer ${token}` },\n        body: fd,\n      });\n\n      if (!response.ok) throw new Error(\"Failed to update product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Produkt zaktualizowany\" });\n      onClose();\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (product) {\n      updateProductMutation.mutate();\n    } else {\n      createProductMutation.mutate();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label>Nazwa</Label>\n        <Input\n          value={formData.name}\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n          required\n          data-testid=\"input-product-name\"\n        />\n      </div>\n\n      <div>\n        <Label>Opis</Label>\n        <Textarea\n          value={formData.description}\n          onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n          required\n          data-testid=\"input-product-description\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label>Cena</Label>\n          <Input\n            type=\"number\"\n            step=\"0.01\"\n            value={formData.price}\n            onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n            required\n            data-testid=\"input-product-price\"\n          />\n        </div>\n\n        <div>\n          <Label>Stan magazynowy</Label>\n          <Input\n            type=\"number\"\n            value={formData.stock}\n            onChange={(e) => setFormData({ ...formData, stock: parseInt(e.target.value) })}\n            required\n            data-testid=\"input-product-stock\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <Label>Kategoria</Label>\n        <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n          <SelectTrigger data-testid=\"select-product-category\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"odziez-robocza\">Odzież robocza</SelectItem>\n            <SelectItem value=\"obuwie\">Obuwie</SelectItem>\n            <SelectItem value=\"rekawice\">Rękawice</SelectItem>\n            <SelectItem value=\"ochrona-glowy\">Ochrona głowy</SelectItem>\n            <SelectItem value=\"ochrona-sluchu\">Ochrona słuchu</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label>URL głównego zdjęcia</Label>\n        <Input\n          value={formData.image}\n          onChange={(e) => setFormData({ ...formData, image: e.target.value })}\n          required\n          data-testid=\"input-product-image\"\n        />\n      </div>\n\n      <div>\n        <Label>Dodatkowe zdjęcia</Label>\n        <Input\n          type=\"file\"\n          multiple\n          accept=\"image/*\"\n          onChange={(e) => setImageFiles(e.target.files)}\n          data-testid=\"input-product-images\"\n        />\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <Switch\n          checked={formData.available}\n          onCheckedChange={(checked) => setFormData({ ...formData, available: checked })}\n          data-testid=\"switch-product-available\"\n        />\n        <Label>Dostępny</Label>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button type=\"submit\" disabled={createProductMutation.isPending || updateProductMutation.isPending} data-testid=\"button-submit-product\">\n          {product ? \"Zaktualizuj\" : \"Utwórz\"}\n        </Button>\n        <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-product\">\n          Anuluj\n        </Button>\n      </div>\n    </form>\n  );\n}\n\n// Missing icon\nfunction Package(props: any) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M16.5 9.4 7.55 4.24\" />\n      <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\" />\n      <polyline points=\"3.29 7 12 12 20.71 7\" />\n      <line x1=\"12\" x2=\"12\" y1=\"22\" y2=\"12\" />\n    </svg>\n  );\n}\n","size_bytes":20800},"public/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1981},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  // project uses `public/src` for frontend files (Vite root is `public`)\n  content: [\"./public/index.html\", \"./public/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\" /* 9px */,\n        md: \".375rem\" /* 6px */,\n        sm: \".1875rem\" /* 3px */,\n      },\n      colors: {\n        // BHP Brand colors\n        brand: {\n          50: \"hsl(48 100% 95%)\",\n          100: \"hsl(48 100% 85%)\",\n          500: \"hsl(48 100% 50%)\", // #ffd000\n          700: \"hsl(48 100% 39%)\",\n        },\n        dark: {\n          900: \"hsl(0 0% 4.3%)\", // #0b0b0b\n          800: \"hsl(0 0% 6.7%)\", // #111111\n        },\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\",\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4446},"public/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1081},"public/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1531},"public/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"./button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2685},"public/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1213},"public/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\nimport { toggleVariants } from \"./toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1743},"public/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1887},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type Gallery,\n  type InsertGallery,\n  type Settings,\n  type InsertSettings,\n} from \"../shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Products\n  getAllProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Orders\n  createOrder(order: InsertOrder): Promise<Order>;\n  getAllOrders(): Promise<Order[]>;\n\n  // Gallery\n  getAllGalleryImages(): Promise<Gallery[]>;\n  createGalleryImage(image: InsertGallery): Promise<Gallery>;\n  deleteGalleryImage(id: string): Promise<void>;\n\n  // Settings\n  getSetting(key: string): Promise<Settings | undefined>;\n  setSetting(key: string, value: string): Promise<Settings>;\n  getAllSettings(): Promise<Settings[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private products: Map<string, Product>;\n  private orders: Map<string, Order>;\n  private gallery: Map<string, Gallery>;\n  private settings: Map<string, Settings>;\n\n  constructor() {\n    this.users = new Map();\n    this.products = new Map();\n    this.orders = new Map();\n    this.gallery = new Map();\n    this.settings = new Map();\n    this.seedData();\n    this.seedSettings();\n  }\n\n  private seedData() {\n    // Seed products\n    const sampleProducts: InsertProduct[] = [\n      {\n        name: \"Kombinezon roboczy PROTECT\",\n        description:\n          \"Wytrzymały kombinezon roboczy z bawełny. Idealny do prac przemysłowych i warsztatowych. Wiele kieszeni funkcjonalnych.\",\n        price: \"159.99\",\n        image:\n          \"https://images.unsplash.com/photo-1622279457486-62dcc4a431d6?w=600&h=600&fit=crop\",\n        category: \"odziez-robocza\",\n        stock: 45,\n      },\n      {\n        name: \"Buty robocze BHP S3\",\n        description:\n          \"Bezpieczne buty robocze z metalowym podnoskiem. Antypoślizgowa podeszwa, odporność na przebicie. Norma S3.\",\n        price: \"249.99\",\n        image:\n          \"https://images.unsplash.com/photo-1608256246200-53e635b5b65f?w=600&h=600&fit=crop\",\n        category: \"obuwie\",\n        stock: 32,\n      },\n      {\n        name: \"Rękawice ochronne ULTRA\",\n        description:\n          \"Rękawice robocze z powłoką lateksową. Doskonała przyczepność i ochrona dłoni. Rozmiar uniwersalny.\",\n        price: \"29.99\",\n        image:\n          \"https://images.unsplash.com/photo-1585399000684-d2f72660f092?w=600&h=600&fit=crop\",\n        category: \"rekawice\",\n        stock: 120,\n      },\n      {\n        name: \"Kask ochronny SAFETY\",\n        description:\n          \"Lekki kask budowlany z regulacją. Odporna skorupa ABS, wentylacja, pasek podbródkowy. Certyfikat CE.\",\n        price: \"79.99\",\n        image:\n          \"https://images.unsplash.com/photo-1589939705384-5185137a7f0f?w=600&h=600&fit=crop\",\n        category: \"ochrona-glowy\",\n        stock: 67,\n      },\n      {\n        name: \"Kamizelka odblaskowa Premium\",\n        description:\n          \"Kamizelka ostrzegawcza klasa 2. Materiał oddychający, regulowane zapięcia. Zgodna z normami UE.\",\n        price: \"39.99\",\n        image:\n          \"https://images.unsplash.com/photo-1581574919402-5b7d733224d6?w=600&h=600&fit=crop\",\n        category: \"odziez-robocza\",\n        stock: 88,\n      },\n      {\n        name: \"Okulary ochronne VISION\",\n        description:\n          \"Okulary ochronne z poliwęglanu. Ochrona UV, odporne na zarysowania. Regulowane zauszniki.\",\n        price: \"49.99\",\n        image:\n          \"https://images.unsplash.com/photo-1574258495973-f010dfbb5371?w=600&h=600&fit=crop\",\n        category: \"ochrona-glowy\",\n        stock: 95,\n      },\n      {\n        name: \"Spodnie robocze MASTER\",\n        description:\n          \"Wzmocnione spodnie robocze z kieszeniami na nakolanniki. Materiał stretch, wysoka wytrzymałość.\",\n        price: \"139.99\",\n        image:\n          \"https://images.unsplash.com/photo-1473966968600-fa801b869a1a?w=600&h=600&fit=crop\",\n        category: \"odziez-robocza\",\n        stock: 54,\n      },\n      {\n        name: \"Nauszniki ochronne PRO\",\n        description:\n          \"Profesjonalne nauszniki ochronne. Tłumienie 32 dB, miękkie poduszki, regulowany pałąk.\",\n        price: \"89.99\",\n        image:\n          \"https://images.unsplash.com/photo-1590658268037-6bf12165a8df?w=600&h=600&fit=crop\",\n        category: \"ochrona-sluchu\",\n        stock: 41,\n      },\n      {\n        name: \"Kurtka robocza zimowa TERMO\",\n        description:\n          \"Ciepła kurtka robocza z odpinaną podpinką. Wodoodporna, elementy odblaskowe, wiele kieszeni.\",\n        price: \"299.99\",\n        image:\n          \"https://images.unsplash.com/photo-1551028719-00167b16eac5?w=600&h=600&fit=crop\",\n        category: \"odziez-robocza\",\n        stock: 28,\n      },\n      {\n        name: \"Półbuty robocze COMFORT\",\n        description:\n          \"Lekkie półbuty robocze S1P. Kompozytowy podnosek, oddychający materiał, podeszwa antyelektrostatyczna.\",\n        price: \"199.99\",\n        image:\n          \"https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=600&h=600&fit=crop\",\n        category: \"obuwie\",\n        stock: 37,\n      },\n      {\n        name: \"Rękawice skórzane PREMIUM\",\n        description:\n          \"Wytrzymałe rękawice ze skóry bydlęcej. Doskonałe do prac ciężkich, wzmocnione szwy.\",\n        price: \"69.99\",\n        image:\n          \"https://images.unsplash.com/photo-1586363104862-3a5e2ab60d99?w=600&h=600&fit=crop\",\n        category: \"rekawice\",\n        stock: 73,\n      },\n      {\n        name: \"Maska spawalnicza AUTO\",\n        description:\n          \"Automatyczna maska spawalnicza. Regulacja zaciemnienia, zasilanie słoneczne, lekka konstrukcja.\",\n        price: \"349.99\",\n        image:\n          \"https://images.unsplash.com/photo-1504328345606-18bbc8c9d7d1?w=600&h=600&fit=crop\",\n        category: \"ochrona-glowy\",\n        stock: 19,\n      },\n    ];\n\n    sampleProducts.forEach((product) => {\n      const id = randomUUID();\n      this.products.set(id, { \n        ...product, \n        id, \n        stock: product.stock ?? 0,\n        images: [],\n        available: true,\n        shipping: \"standard\"\n      });\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    // ensure required fields on User type (insertUser.isAdmin may be optional)\n    const user: User = {\n      ...insertUser,\n      id,\n      isAdmin: insertUser.isAdmin ?? false,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Product methods\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    // ensure stock is present (InsertProduct.stock can be optional)\n    const product: Product = {\n      ...insertProduct,\n      id,\n      stock: insertProduct.stock ?? 0,\n      images: insertProduct.images ?? [],\n      available: insertProduct.available ?? true,\n      shipping: insertProduct.shipping ?? \"standard\",\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  // Order methods\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const createdAt = new Date().toISOString();\n    // ensure required Order fields (status/userId) have defaults matching DB defaults\n    const order: Order = {\n      ...insertOrder,\n      id,\n      createdAt,\n      status: insertOrder.status ?? \"pending\",\n      userId: insertOrder.userId ?? null,\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  // Product update/delete methods\n  async updateProduct(id: string, productUpdate: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existing = this.products.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Product = {\n      ...existing,\n      ...productUpdate,\n      images: productUpdate.images ?? existing.images,\n      available: productUpdate.available ?? existing.available,\n      shipping: productUpdate.shipping ?? existing.shipping,\n    };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    this.products.delete(id);\n  }\n\n  // Gallery methods\n  async getAllGalleryImages(): Promise<Gallery[]> {\n    return Array.from(this.gallery.values());\n  }\n\n  async createGalleryImage(insertGallery: InsertGallery): Promise<Gallery> {\n    const id = randomUUID();\n    const uploadedAt = new Date().toISOString();\n    const galleryImage: Gallery = {\n      ...insertGallery,\n      id,\n      uploadedAt,\n    };\n    this.gallery.set(id, galleryImage);\n    return galleryImage;\n  }\n\n  async deleteGalleryImage(id: string): Promise<void> {\n    this.gallery.delete(id);\n  }\n\n  // Settings methods\n  async getSetting(key: string): Promise<Settings | undefined> {\n    return Array.from(this.settings.values()).find(s => s.key === key);\n  }\n\n  async setSetting(key: string, value: string): Promise<Settings> {\n    const existing = await this.getSetting(key);\n    if (existing) {\n      existing.value = value;\n      this.settings.set(existing.id, existing);\n      return existing;\n    }\n    \n    const id = randomUUID();\n    const setting: Settings = { id, key, value };\n    this.settings.set(id, setting);\n    return setting;\n  }\n\n  async getAllSettings(): Promise<Settings[]> {\n    return Array.from(this.settings.values());\n  }\n\n  private seedSettings() {\n    // Seed default settings\n    const defaultSettings = [\n      { key: \"siteName\", value: \"Sklep BHP Perfekt\" },\n      { key: \"bannerShow\", value: \"true\" },\n      { key: \"bannerText\", value: \"Promocja! -20% na całą odzież roboczą!\" },\n      { key: \"bannerLink\", value: \"/products\" },\n    ];\n\n    defaultSettings.forEach(setting => {\n      const id = randomUUID();\n      this.settings.set(id, { id, ...setting });\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11038},"public/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"public/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { ShoppingCart, Menu, X, ChevronDown } from \"lucide-react\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { useState } from \"react\";\n\nexport function Header({ cartItemCount = 0 }: { cartItemCount?: number }) {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [categoriesOpen, setCategoriesOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/\", label: \"Strona główna\" },\n    { href: \"/o-nas\", label: \"O nas\" },\n    { href: \"/kontakt\", label: \"Kontakt\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === href;\n    return location.startsWith(href);\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-black text-white shadow-lg\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center gap-2\" data-testid=\"link-home\">\n            <div className=\"text-2xl font-bold\">\n              Sklep <span className=\"text-primary\">BHP</span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center gap-1\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`px-4 py-2 rounded-md font-medium transition-colors hover-elevate active-elevate-2 ${\n                  isActive(item.href) ? \"text-primary\" : \"text-white\"\n                }`}\n                data-testid={`link-nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {item.label}\n                {isActive(item.href) && (\n                  <div className=\"h-0.5 bg-primary mt-1 rounded-full\" />\n                )}\n              </Link>\n            ))}\n          </nav>\n\n          {/* Cart & Mobile Menu */}\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/koszyk\" data-testid=\"link-cart\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative text-white hover:text-primary\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n                {cartItemCount > 0 && (\n                  <Badge\n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 bg-primary text-black text-xs font-bold\"\n                    data-testid=\"badge-cart-count\"\n                  >\n                    {cartItemCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n\n            {/* Mobile menu button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden text-white\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? (\n                <X className=\"h-6 w-6\" />\n              ) : (\n                <Menu className=\"h-6 w-6\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <nav className=\"md:hidden py-4 border-t border-white/10\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`block px-4 py-3 rounded-md font-medium transition-colors hover-elevate ${\n                  isActive(item.href)\n                    ? \"text-primary bg-white/5\"\n                    : \"text-white\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n                data-testid={`link-mobile-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </nav>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":4012},"public/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"../components/ui/button\";\nimport { Card } from \"../components/ui/card\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../components/ui/tabs\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { apiRequest } from \"../lib/queryClient\";\nimport { Shield } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const [loginData, setLoginData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [registerData, setRegisterData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", loginData);\n    },\n    onSuccess: (data: any) => {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      toast({\n        title: \"Zalogowano pomyślnie\",\n        description: `Witaj, ${data.user.username}!`,\n      });\n      setTimeout(() => setLocation(\"/admin\"), 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Błąd logowania\",\n        description: error.message || \"Nieprawidłowy email lub hasło\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", registerData);\n    },\n    onSuccess: (data: any) => {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      toast({\n        title: \"Konto utworzone\",\n        description: \"Zostałeś automatycznie zalogowany.\",\n      });\n      setTimeout(() => setLocation(\"/admin\"), 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Błąd rejestracji\",\n        description: error.message || \"Nie udało się utworzyć konta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate();\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-16 px-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-primary rounded-full mb-4\">\n            <Shield className=\"h-8 w-8 text-black\" />\n          </div>\n          <h1 className=\"text-4xl font-bold mb-2\">Panel administracyjny</h1>\n          <p className=\"text-muted-foreground\">Zaloguj się lub utwórz konto</p>\n        </div>\n\n        <Card className=\"p-6\">\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">\n                Logowanie\n              </TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">\n                Rejestracja\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"login-email\">Email</Label>\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    required\n                    value={loginData.email}\n                    onChange={(e) =>\n                      setLoginData({ ...loginData, email: e.target.value })\n                    }\n                    placeholder=\"admin@sklepbhp.pl\"\n                    data-testid=\"input-login-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"login-password\">Hasło</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    required\n                    value={loginData.password}\n                    onChange={(e) =>\n                      setLoginData({ ...loginData, password: e.target.value })\n                    }\n                    placeholder=\"••••••••\"\n                    data-testid=\"input-login-password\"\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Logowanie...\" : \"Zaloguj się\"}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"register-username\">Nazwa użytkownika</Label>\n                  <Input\n                    id=\"register-username\"\n                    required\n                    value={registerData.username}\n                    onChange={(e) =>\n                      setRegisterData({ ...registerData, username: e.target.value })\n                    }\n                    placeholder=\"admin\"\n                    data-testid=\"input-register-username\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"register-email\">Email</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    required\n                    value={registerData.email}\n                    onChange={(e) =>\n                      setRegisterData({ ...registerData, email: e.target.value })\n                    }\n                    placeholder=\"admin@sklepbhp.pl\"\n                    data-testid=\"input-register-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"register-password\">Hasło</Label>\n                  <Input\n                    id=\"register-password\"\n                    type=\"password\"\n                    required\n                    value={registerData.password}\n                    onChange={(e) =>\n                      setRegisterData({ ...registerData, password: e.target.value })\n                    }\n                    placeholder=\"••••••••\"\n                    data-testid=\"input-register-password\"\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Tworzenie konta...\" : \"Zarejestruj się\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7286},"public/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"./button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4410},"public/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1206},"public/src/pages/Contact.tsx":{"content":"import { Card } from \"../components/ui/card\";\nimport { Mail, Phone, MapPin, Clock } from \"lucide-react\";\nimport { MapComponent } from \"../components/MapComponent\";\n\nexport default function Contact() {\n  const contactInfo = [\n    {\n      icon: Phone,\n      title: \"Telefon\",\n      content: \"+48 123 456 789\",\n      link: \"tel:+48123456789\",\n    },\n    {\n      icon: Mail,\n      title: \"Email\",\n      content: \"kontakt@sklepbhp.pl\",\n      link: \"mailto:kontakt@sklepbhp.pl\",\n    },\n    {\n      icon: MapPin,\n      title: \"Adres\",\n      content: \"Bohaterów Modlina 17, 05-100 Nowy Dwór Mazowiecki\",\n      link: null,\n    },\n    {\n      icon: Clock,\n      title: \"Godziny otwarcia\",\n      content: \"Pn-Pt: 8:00-17:00, Sob: 9:00-14:00\",\n      link: null,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Hero */}\n      <section className=\"bg-black text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6\">Kontakt</h1>\n          <p className=\"text-xl md:text-2xl text-gray-300\">\n            Skontaktuj się z nami - chętnie odpowiemy na wszystkie pytania\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Cards */}\n      <section className=\"py-16 md:py-20\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n            {contactInfo.map((info, index) => (\n              <Card key={index} className=\"p-6 text-center hover-elevate\">\n                <div className=\"bg-primary rounded-full p-4 inline-flex mb-4\">\n                  <info.icon className=\"h-6 w-6 text-black\" />\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2\">{info.title}</h3>\n                {info.link ? (\n                  <a\n                    href={info.link}\n                    className=\"text-muted-foreground hover:text-primary transition-colors\"\n                    data-testid={`link-${info.title.toLowerCase()}`}\n                  >\n                    {info.content}\n                  </a>\n                ) : (\n                  <p className=\"text-muted-foreground\">{info.content}</p>\n                )}\n              </Card>\n            ))}\n          </div>\n\n          {/* Additional Info */}\n          <Card className=\"p-8 md:p-12\">\n            <div className=\"max-w-3xl mx-auto\">\n              <h2 className=\"text-3xl font-bold mb-6\">Masz pytania?</h2>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                Nasz zespół ekspertów jest do Twojej dyspozycji. Skontaktuj się z\n                nami telefonicznie lub mailowo, a pomożemy Ci dobrać odpowiednie\n                produkty BHP dla Twojej firmy.\n              </p>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                Oferujemy również doradztwo w zakresie doboru środków ochrony\n                osobistej oraz możliwość zamówień hurtowych z atrakcyjnymi rabatami.\n              </p>\n              <div className=\"bg-primary/10 border-l-4 border-primary p-4 rounded\">\n                <p className=\"font-semibold\">Zamówienia hurtowe</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Dla firm oferujemy specjalne warunki współpracy i rabaty. Skontaktuj\n                  się z nami, aby uzyskać ofertę.\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Map */}\n          <div className=\"mt-12\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-bold mb-6 text-center\">Nasza Lokalizacja</h2>\n              <MapComponent />\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":3778},"public/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7613},"public/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1471},"public/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2716},"public/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7432},"public/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5745},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"127.0.0.1\", // ✅ IPv4, работает на Windowsр\n    },\n    () => {\n      log(`✅ Server running at http://127.0.0.1:${port}`);\n    }\n  );\n})();\n","size_bytes":2137}},"version":2}